package protocolsupport.protocol.pipeline.version.v_beta;

import protocolsupport.api.utils.NetworkState;
import protocolsupport.protocol.ConnectionImpl;
import protocolsupport.protocol.packet.PacketType;
import protocolsupport.protocol.packet.middleimpl.clientbound.login.noop.NoopLoginSuccess;
import protocolsupport.protocol.packet.middleimpl.clientbound.login.noop.NoopSetCompression;
import protocolsupport.protocol.packet.middleimpl.clientbound.login.v_beta.LoginDisconnect;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopAdvancements;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopAdvanementsTab;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopBlockBreakAnimation;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopBlockOpenSignEditor;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopBossBar;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopCamera;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopCombatEvent;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopCraftRecipeConfirm;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopCustomPayload;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopDeclareCommands;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopDeclareRecipes;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopDeclareTags;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopEntityEffectAdd;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopEntityEffectRemove;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopEntityHeadRotation;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopEntityLeash;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopEntitySetAttributes;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopEntitySound;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopHeldSlot;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopLookAt;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopPlayerAbilities;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopPlayerListHeaderFooter;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopPlayerListSetEntry;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopResourcePack;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopScoreboardDisplay;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopScoreboardObjective;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopScoreboardScore;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopScoreboardTeam;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopServerDifficulty;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopSetCooldown;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopSetExperience;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopSetViewCenter;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopStatistics;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopStopSound;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopTabComplete;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopTitle;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopUnlockRecipes;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopUpdateViewDistance;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopVehicleMove;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopWorldBorder;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopWorldCustomSound;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopWorldParticle;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.noop.NoopWorldSound;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.BlockBreakConfirm;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.BlockAction;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.BlockChangeMulti;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.BlockChangeSingle;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.BlockTileUpdate;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.ChangeDimension;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.Chat;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.Chunk;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.ChunkLight;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.ChunkUnload;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.CollectEffect;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.Entity;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityAnimation;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityDestroy;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityEquipment;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityLook;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityMetadata;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityPassengers;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityRelMove;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityRelMoveLook;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityStatus;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityTeleport;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.EntityVelocity;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.Explosion;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.GameStateChange;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.InventoryClose;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.InventoryConfirmTransaction;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.InventoryOpen;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.InventorySetItems;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.InventorySetSlot;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.KeepAlive;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.KickDisconnect;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SetHealth;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SetPosition;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnExpOrb;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnGlobal;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnLiving;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnNamed;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnObject;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnPainting;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.SpawnPosition;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.StartGame;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.TimeUpdate;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.UpdateMap;
import protocolsupport.protocol.packet.middleimpl.clientbound.play.v_beta.WorldEvent;
import protocolsupport.protocol.pipeline.version.util.encoder.AbstractPacketEncoder;

public class PacketEncoder extends AbstractPacketEncoder {

	{
		registry.register(NetworkState.LOGIN, PacketType.CLIENTBOUND_LOGIN_DISCONNECT, LoginDisconnect::new);
		registry.register(NetworkState.LOGIN, PacketType.CLIENTBOUND_LOGIN_SET_COMPRESSION, NoopSetCompression::new);
		registry.register(NetworkState.LOGIN, PacketType.CLIENTBOUND_LOGIN_SUCCESS, NoopLoginSuccess::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_KEEP_ALIVE, KeepAlive::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_START_GAME, StartGame::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CHAT, Chat::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_UPDATE_TIME, TimeUpdate::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_EQUIPMENT, EntityEquipment::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_POSITION, SpawnPosition::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SET_HEALTH, SetHealth::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_RESPAWN, ChangeDimension::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_POSITION, SetPosition::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_NAMED, SpawnNamed::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_COLLECT_EFFECT, CollectEffect::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_OBJECT, SpawnObject::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_LIVING, SpawnLiving::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_PAINTING, SpawnPainting::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_EXP_ORB, SpawnExpOrb::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SPAWN_GLOBAL, SpawnGlobal::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_VELOCITY, EntityVelocity::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_DESTROY, EntityDestroy::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_NOOP, Entity::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_REL_MOVE, EntityRelMove::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_LOOK, EntityLook::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_REL_MOVE_LOOK, EntityRelMoveLook::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_TELEPORT, EntityTeleport::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_STATUS, EntityStatus::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_METADATA, EntityMetadata::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_ANIMATION, EntityAnimation::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_PASSENGERS, EntityPassengers::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CHUNK_SINGLE, Chunk::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CHUNK_LIGHT, ChunkLight::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CHUNK_UNLOAD, ChunkUnload::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BLOCK_CHANGE_MULTI, BlockChangeMulti::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BLOCK_CHANGE_SINGLE, BlockChangeSingle::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BLOCK_BREAK_CONFIRM, BlockBreakConfirm::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BLOCK_ACTION, BlockAction::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BLOCK_TILE, BlockTileUpdate::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_EXPLOSION, Explosion::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WORLD_EVENT, WorldEvent::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_GAME_STATE_CHANGE, GameStateChange::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WINDOW_OPEN, InventoryOpen::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WINDOW_CLOSE, InventoryClose::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WINDOW_SET_SLOT, InventorySetSlot::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WINDOW_SET_ITEMS, InventorySetItems::new);
//		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WINDOW_DATA, InventoryData::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WINDOW_TRANSACTION, InventoryConfirmTransaction::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_UPDATE_MAP, UpdateMap::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_KICK_DISCONNECT, KickDisconnect::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_EFFECT_ADD, NoopEntityEffectAdd::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_EFFECT_REMOVE, NoopEntityEffectRemove::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BLOCK_BREAK_ANIMATION, NoopBlockBreakAnimation::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_HEAD_ROTATION, NoopEntityHeadRotation::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_PLAYER_INFO, NoopPlayerListSetEntry::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_TAB_COMPLETE, NoopTabComplete::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WORLD_SOUND, NoopWorldSound::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WORLD_CUSTOM_SOUND, NoopWorldCustomSound::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SET_EXPERIENCE, NoopSetExperience::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_LEASH, NoopEntityLeash::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_HELD_SLOT, NoopHeldSlot::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_PLAYER_ABILITIES, NoopPlayerAbilities::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CUSTOM_PAYLOAD, NoopCustomPayload::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SERVER_DIFFICULTY, NoopServerDifficulty::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_COMBAT_EVENT, NoopCombatEvent::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WORLD_BORDER, NoopWorldBorder::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_TITLE, NoopTitle::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_PLAYER_LIST_HEADER_FOOTER, NoopPlayerListHeaderFooter::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CAMERA, NoopCamera::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SET_COOLDOWN, NoopSetCooldown::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_BOSS_BAR, NoopBossBar::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_VEHICLE_MOVE, NoopVehicleMove::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_STATISTICS, NoopStatistics::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_RESOURCE_PACK, NoopResourcePack::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SIGN_EDITOR, NoopBlockOpenSignEditor::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_ATTRIBUTES, NoopEntitySetAttributes::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_WORLD_PARTICLES, NoopWorldParticle::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SCOREBOARD_DISPLAY_SLOT, NoopScoreboardDisplay::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SCOREBOARD_SCORE, NoopScoreboardScore::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SCOREBOARD_OBJECTIVE, NoopScoreboardObjective::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SCOREBOARD_TEAM, NoopScoreboardTeam::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_UNLOCK_RECIPES, NoopUnlockRecipes::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ADVANCEMENTS, NoopAdvancements::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ADVANCEMENTS_TAB, NoopAdvanementsTab::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_CRAFT_RECIPE_CONFIRM, NoopCraftRecipeConfirm::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_DECLARE_COMMANDS, NoopDeclareCommands::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_DECLARE_RECIPES, NoopDeclareRecipes::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_DECLARE_TAGS, NoopDeclareTags::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_STOP_SOUND, NoopStopSound::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_LOOK_AT, NoopLookAt::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_SET_VIEW_CENTER, NoopSetViewCenter::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_UPDATE_VIEW_DISTANCE, NoopUpdateViewDistance::new);
		registry.register(NetworkState.PLAY, PacketType.CLIENTBOUND_PLAY_ENTITY_SOUND, NoopEntitySound::new);
	}

	public PacketEncoder(ConnectionImpl connection) {
		super(connection);
	}

}
